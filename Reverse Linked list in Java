import java.math.*;
import java.util.*;

public class Reverse_linkedlist 
{
    static class DoublyLinkedListNode 
    {
        public int data;
        public DoublyLinkedListNode next;
        public DoublyLinkedListNode prev;

        public DoublyLinkedListNode(int nodeData) 
        {
            this.data = nodeData;
            this.next = null;
            this.prev = null;
        }
    }

    static class DoublyLinkedList 
    {
        public DoublyLinkedListNode head;
        public DoublyLinkedListNode tail;

        public DoublyLinkedList() 
        {
            this.head = null;
            this.tail = null;
        }

        public void insertNode(int nodeData) 
        {
            DoublyLinkedListNode node = new DoublyLinkedListNode(nodeData);

            if (this.head == null) 
            {
                this.head = node;
            } else 
            {
                this.tail.next = node;
                node.prev = this.tail;
            }

            this.tail = node;
        }
    }

    public static void printDoublyLinkedList(DoublyLinkedListNode node, String sep) 
    {
        while (node != null) 
        {
            System.out.print(String.valueOf(node.data));

            node = node.next;

            if (node != null) {
                System.out.print(sep);
            }
        }
    }

    /*
        Node Reverse(Node head) 
        {
        Node temp = head;
        Node newHead = head;
        while (temp != null) 
        {
            Node prev = temp.prev;
            temp.prev = temp.next;
            temp.next = prev;
            newHead = temp;
            temp = temp.prev;
        }
        return newHead;
        }*/
         
    static DoublyLinkedListNode reverse(DoublyLinkedListNode curr) 
    {
    DoublyLinkedListNode temp = curr.next;
    curr.next = curr.prev;
    curr.prev = temp;
    return temp == null ? curr : reverse(temp);
    }

    

    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        
        for (int tItr = 0; tItr < t; tItr++) 
        {
            DoublyLinkedList llist = new DoublyLinkedList();

            int llistCount = scanner.nextInt();
            
            for (int i = 0; i < llistCount; i++) 
            {
                int llistItem = scanner.nextInt();

                llist.insertNode(llistItem);
            }

            DoublyLinkedListNode llist1 = reverse(llist.head);

            printDoublyLinkedList(llist1, " ");
            
        }

        
    }
}
